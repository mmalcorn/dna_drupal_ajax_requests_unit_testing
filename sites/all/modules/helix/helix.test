<?php

class HelixTests extends DrupalWebTestCase {

    public static function getInfo() {
        return array(
            'name' => 'Helix Tests',
            'description' => 'Tests for the Helix Module user interface',
            'group' => 'Custom Modules',
        );

    }
    public function setUp() {
        parent::setUp(array('helix'));
    }

    public function testLoginWelcome() {
        $user = $this->drupalCreateAdminUser();
        $this->drupalLogin($user);
        $this->assertText('Welcome Home!', 'The user was successfully redirected home.');
    }
    public function testDnaNavigation() {
        $this->drupalGet('home');
        $this->assertText('Welcome Home!', 'The text on the page is correct.');
    }
    //TODO:TEST 1: Upon clicking submit the user should be taken to a success page

    public function testHelixFormSuccess() {
        $info = array();
        $info['dna_sequence']['title'] = 'DNA Helix';
        $info['dna_sequence']["body[und][0][value]"] = 'Please enter half of a DNA helix to generate the other half.';

        $this->drupalPost('/double_helix', $info, t('Submit'));

        $path['source'] = '/double_helix';
        path_save($path);
    }
    //TODO:TEST 2: When incorrect values are entered, an error message should show.

    public function drupalCreateAdminUser(array $permissions = array()) {
        $roles = user_roles();
        $index = array_search('admin', $roles);
        $user = $this->drupalCreateUser($permissions);
        $user->roles[$index] = 'admin';
        return user_save($user);
    }
}


class HelixCaseTest extends DrupalUnitTestCase
{
    public static function getInfo()
    {
        return array(
            'name' => 'Helix',
            'description' => 'A form that allows a user to enter half of their DNA helix.  Upon submit, it will generate the other half.',
            'group' => 'Custom Modules',
        );
    }

    function testGenerateDna()
    {
        //English description
        //displays desired result during test
        $description = 'A single nucleotide shows its opposite - (A) is displayed as (T)';

        //Arrange
        //create input
        $input = 'A';

        //Act
        //run the function we're testing with input and store output in $result.
        $result = generate_dna($input);

        //Assert
        //This time we're using assertEqual
        //If the first argument == second argument, test passes.
        //Again pass in $description for display.
        $expected_output = 'T';
        $this->assertEqual($result, $expected_output, $description);


        $description = 'A single nucleotide shows its opposite - (C) is displayed as (G)';
        $input = 'C';
        $result = generate_dna($input);
        $expected_output = 'G';
        $this->assertEqual($result, $expected_output, $description);

        $description = 'A sequence of two nucleotides shows its respective opposites - (CT) is displayed as (GA)';
        $input = 'CT';
        $result = generate_dna($input);
        $expected_output = 'GA';
        $this->assertEqual($result, $expected_output, $description);

        $description = 'A sequence of three nucleotides shows its respective opposites - (ACT) is displayed as (TGA)';
        $input = 'ACT';
        $result = generate_dna($input);
        $expected_output = 'TGA';
        $this->assertEqual($result, $expected_output, $description);

        $description = 'A sequence of four nucleotides shows its respective opposites - (GTGC) is displayed as (CACG)';
        $input = 'GTGC';
        $result = generate_dna($input);
        $expected_output = 'CACG';
        $this->assertEqual($result, $expected_output, $description);
    }

}
